#include <ESP8266WiFi.h>
#include <WiFiUDP.h>

const char* ssid = "Controller";
IPAddress remote(192, 168, 0, 1);
unsigned int port = 100;
unsigned int port2 = 150;

WiFiUDP udp;
char incomingPacket[255];
char sendPacket[] = "1";


void setup() {
  Serial.begin(115200);
  udp.begin(port);
  WiFi.softAP(ssid);
  pinMode(2, OUTPUT);
////////Button Pins///////
  pinMode(12, INPUT_PULLUP); //Left
  pinMode(13, INPUT_PULLUP); //Right
  pinMode(4, INPUT_PULLUP);  //Up
  pinMode(5, INPUT_PULLUP);  //Down
  
}
////////Finding and sending button press///////
void loop() {
  switch (buttoncheck()){
    case 12:
      sendPress(12);
      break;
    case 13:
      sendPress(13);
      break;
    case 4:
      sendPress(4);
      break;
    case 5:
      sendPress(5);
      break;
    case 0:
      break;
    }
  }
  


//////Function to send information to the reciever///////
void sendPress(int pressed){
   if (udp.beginPacket(remote, port2) == 1) {
   // String temp = String(pressed);
   // temp.toCharArray(sendPacket,1);
    udp.write(sendPacket);
    delay(10);
  }                                             ////Start packet and write if it starts
  else {
    Serial.print(" Packet not started. ");
    return;
  }

  switch (udp.endPacket()) {
    case 0:
      Serial.print(" Packet NOT sent!!! ");
      break;                                   ////Ending packet
    case 1:
      Serial.print(" Packet Sent! ");
      Serial.println(remote);
      break;
  }
  delay(10);
  digitalWrite(2, LOW);
  delay(10);                                ////Blinking blue LED to indicate working
  digitalWrite(2, HIGH);
}


///////Checks for button press, only one is registered///////
int buttoncheck(){
  if(digitalRead(12) == LOW){
    Serial.print("Left Button");
    return 12;
  }
  else if(digitalRead(13) == LOW){
    Serial.print("Right Button");
    return 13;
  }
  else if(digitalRead(4) == LOW){
    Serial.print("Up Button");
    return 4;
  }
  else if(digitalRead(5) == LOW){
    Serial.print("Down Button");
    return 5;
  }
  else {
    return 0;
  }
}

